<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>java基础</title>
    <link href="/java%E5%9F%BA%E7%A1%80/"/>
    <url>/java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="java泛型"><a href="#java泛型" class="headerlink" title="java泛型"></a>java泛型</h2><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><p><strong>可以在类声明时通过一个标识来表示类中某个属性的类型，或者是某个方法的返回值类型，或者是参数类型</strong>。就是相当于一个类型占位符。以前需要显示的指定某种数据的类型，现在可以用一个符号来代替。这样该变量的数据类型就不是固定的了！我们就可以根据实际需要，在创建对象的时候选择响应的数据类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>  &#123;<br>      <br>Person&lt;String&gt; person1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>&lt;&gt;(<span class="hljs-string">&quot;code&quot;</span>);<br>            Person&lt;Integer&gt; person2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>&lt;&gt;(<span class="hljs-number">10010</span>);<br><br>    &#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&lt;T&gt;&#123;<br>    <span class="hljs-keyword">private</span> T t;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(T t)</span>&#123;<br>    <span class="hljs-built_in">this</span>.t=t;<br>&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setT</span><span class="hljs-params">(T t)</span> &#123;<br>        <span class="hljs-built_in">this</span>.t = t;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getT</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="声明："><a href="#声明：" class="headerlink" title="声明："></a>声明：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">interfac 接口&lt;T,R,...&gt;&#123;&#125; 和  类class 类&lt;k,v,...&gt;&#123;&#125;<br><br><span class="hljs-keyword">private</span> T[] arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>[<span class="hljs-number">10</span>];   (错误的定义)<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">(T t)</span>&#123;<br>        <span class="hljs-comment">//错误的定义</span><br>    &#125;<br>因为静态属性是和类相关关的，在类加载时候对象还没有创建，并不知道具体类型是什么。所以无法初始化。<br></code></pre></td></tr></table></figure><ol><li><p>T,E等只能是引用类型</p></li><li><p>在指定泛型的具体类型后，构造器可以传入该类型或者它的子类类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>  &#123;<br>    Person&lt;A&gt; person=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>());<br>    Person&lt;A&gt; person2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>());<br><br>    &#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&lt;T&gt;&#123;<br>    <span class="hljs-keyword">private</span> T t;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(T t)</span>&#123;<br>    <span class="hljs-built_in">this</span>.t=t;<br>&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setT</span><span class="hljs-params">(T t)</span> &#123;<br>        <span class="hljs-built_in">this</span>.t = t;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getT</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用泛型的数组，不能初始化</p></li><li><p>静态方法中不能使用类的泛型</p></li></ol><h3 id="泛型方法："><a href="#泛型方法：" class="headerlink" title="泛型方法："></a>泛型方法：</h3><p>修饰符 &lt;T,R,…&gt; 返回类型 方法名(参数列表){  }</p><ol><li><p>泛型方法<strong>可以定义在普通类中，也可以在泛型类中</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>&lt;T,R&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">run1</span><span class="hljs-params">(T t,R r)</span>&#123;<br>        <span class="hljs-comment">//这是一个泛型方法</span><br>    &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run2</span><span class="hljs-params">(T t,R r)</span>&#123;<br>        <span class="hljs-comment">//这个是使用了类定义的泛型</span><br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>泛型方法，可以使用类声明的泛型，也可以使用自己声明的泛型。</p></li></ol><h3 id="泛型的继承和通配"><a href="#泛型的继承和通配" class="headerlink" title="泛型的继承和通配:"></a>泛型的继承和通配:</h3><ol><li>泛型不具备继承性</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>  &#123;<br>   Object o=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;code&quot;</span>);    <span class="hljs-comment">//T</span><br>   List&lt;Object&gt; list1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;(); <span class="hljs-comment">//F 这样就是不可以的，不具备继承性</span><br>   List&lt;Object&gt; list2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>   list2.add(<span class="hljs-string">&quot;kkk&quot;</span>)<br> &#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li><p>通配符的使用</p><ol><li>? 表示什么类型都可以  &lt;? extends A&gt; 表示A及其子类   &lt;? super A&gt; A及其父类 </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">GrandFather</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrandFather</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Util</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">add01</span><span class="hljs-params">(List&lt;?&gt; c)</span>&#123; <br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">add02</span><span class="hljs-params">(List&lt;? extends GrandFather&gt; c)</span>&#123;<br><br>    &#125; <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">add03</span><span class="hljs-params">(List&lt;? <span class="hljs-built_in">super</span> Father&gt; c)</span>&#123;<br><br>    &#125;<br>&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;Object&gt; object=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;GrandFather&gt; grandFather=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;Father&gt; father=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;Son&gt; son=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        Util.add01(object); <span class="hljs-comment">//每一个都可以添加</span><br>        Util.add02(father); <span class="hljs-comment">//可以添加GrandFather的子类</span><br>        Util.add03(son);   <span class="hljs-comment">//不可以，因为son不是Father的父类</span><br>        Util.add03(grandFather);   <span class="hljs-comment">//可以添加</span><br>    &#125;<br><br></code></pre></td></tr></table></figure></li></ol><hr><h2 id="Io流："><a href="#Io流：" class="headerlink" title="Io流："></a>Io流：</h2><h3 id="文件操作："><a href="#文件操作：" class="headerlink" title="文件操作："></a>文件操作：</h3><p>文件流：</p><ul><li>输入和输出是以计算机内存视角来看的。从计算机内存写数据到文件（硬盘），叫输出流</li><li>从文件读数据到内存，叫输入流。就是输入进来的意思。流只是个名字（emo的名字）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//这里创建的文件，它的上级目录必须存在才能创建。并且创的是文件不是目录</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;e:\\file.txt&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            file.createNewFile();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    <br>      <span class="hljs-comment">//常用方法</span><br>        System.out.println(<span class="hljs-string">&quot;文件名字=&quot;</span>+file.getName());<br>        System.out.println(<span class="hljs-string">&quot;文件绝对路径=&quot;</span>+file.getAbsolutePath());<br>        System.out.println(<span class="hljs-string">&quot;文件长度（字节数）=&quot;</span>+file.length());<br>        System.out.println(<span class="hljs-string">&quot;文件是否存在=&quot;</span>+file.exists());<br>        System.out.println(<span class="hljs-string">&quot;文件是不是个目录=&quot;</span>+file.isDirectory());<br>        System.out.println(<span class="hljs-string">&quot;文件是不是个文件=&quot;</span>+file.isFile());<br>     System.out.println(<span class="hljs-string">&quot;文件是否删除成功=&quot;</span>+file.delete());  <span class="hljs-comment">//只能删除空目录或者单个文件</span><br>    <br>    <span class="hljs-comment">//目录操作</span><br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;e:\\file\\file02\\file03&quot;</span>);<br>        <span class="hljs-keyword">if</span> (file.exists())&#123;<br>            System.out.println(<span class="hljs-string">&quot;目录已经存在&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!file.mkdirs()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;创建失败&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>按照操作数据的单位不同，分为字节流（8bit）,字符流。从效率上来说，字符流一次读取的数据更多。但是在对于二进制文件，比如声音视频这种，字节流可以保证无损操作。而字符流用来读取文本文件时则更为适合</p><table><thead><tr><th align="center">抽象基类</th><th align="center">字节流</th><th align="center">字符流</th></tr></thead><tbody><tr><td align="center">输入流</td><td align="center">InputStream</td><td align="center">Reader</td></tr><tr><td align="center">输出流</td><td align="center">OutputSteram</td><td align="center">Writer</td></tr></tbody></table><p>其余的所有的子类都是以这个四个基类为结尾名字的类。</p><h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        String path=<span class="hljs-string">&quot;e:\\file.txt&quot;</span>;<br>        <span class="hljs-type">byte</span>[] bytes=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">8</span>];<br>        <span class="hljs-type">int</span> readLen=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(path);<br>            <span class="hljs-keyword">while</span> (( readLen = fileInputStream.read(bytes))!=-<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-comment">//原理是：每一次输入流都会读8个字节，存放到bytes数组  </span><br>                System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes,<span class="hljs-number">0</span>,readLen));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fileInputStream.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br><span class="hljs-comment">//输出流</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <br>        String path=<span class="hljs-string">&quot;e:\\file.txt&quot;</span>;<br>        String text=<span class="hljs-string">&quot;hello word&quot;</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">            *  如果文件不存在，会自己创建。但是上级目录必须存在。如果不指定为true，会覆盖原数据。</span><br><span class="hljs-comment">            *  outputStream =new FileOutputStream(path,true); </span><br><span class="hljs-comment">            *  true就是追加</span><br><span class="hljs-comment">            */</span><br>            outputStream =<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(path);<br>            outputStream.write(text.getBytes());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                outputStream.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>FileWriter和InputStream用法没有什么太大区别！但是FileWriter最后一定要调用close或者flush，不然内容还在内存。</p></blockquote><h3 id="BufferedInputStream"><a href="#BufferedInputStream" class="headerlink" title="BufferedInputStream"></a>BufferedInputStream</h3><p><img src="/blogImg/BufferedWriter.png" alt="BufferedWriter"></p><p><img src="/blogImg/BufferedWriter-02.png" alt="BufferedWriter-02"></p><ul><li>从BufferedWriter的构造器中我们可以发现传入的参数可以是一个Writer，那么就意味着Writer的所有子类都可以作为参数传递。这样BufferedWriter就可以通过传入的不同的Writer子类来实现各种不同的处理功能<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="图片来源和内容参考：韩顺平 零基础30天学会Java-哔哩哔哩 https://b23.tv/iluN6Xg">[1]</span></a></sup>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//字符缓冲处理流 字节缓冲处理流也是大同小异</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        String path=<span class="hljs-string">&quot;e:\\test.txt&quot;</span>;<br>        String path2=<span class="hljs-string">&quot;e:\\test2.txt&quot;</span>;<br>        BufferedReader reader=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(path));<br>     BufferedWriter writer=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(path2,<span class="hljs-literal">true</span>));<br>        String line;<br>        <span class="hljs-comment">//按行读取，当返回为空时读完</span><br>        <span class="hljs-keyword">while</span> (( line= reader.readLine())!=<span class="hljs-literal">null</span>)&#123;<br>            writer.write(line);<br>            System.out.println(line);<br>        &#125;<br>        writer.close();<br>        reader.close();<br>    &#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h3><p>目的：保存数据的时候把数据的类型和值一起保存。这个过程就叫序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">//序列化后保存的文件形式并不是文本格式。而是一种特定的格式。所以这里是什么格式并不影响</span><br>        String path=<span class="hljs-string">&quot;e:\\data.dat&quot;</span>;<br>       <span class="hljs-comment">//提供序列化功能</span><br>        ObjectOutputStream objOut=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(path));<br>        objOut.writeInt(<span class="hljs-number">100</span>);<br>        objOut.writeBoolean(<span class="hljs-literal">true</span>);<br>        objOut.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;旺财&quot;</span>,<span class="hljs-number">2</span>));<br><br>       <span class="hljs-comment">//反序列化功能</span><br>        ObjectInputStream objInput=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(path));<br>        <span class="hljs-comment">//反序列化的顺序一定要和序列化的顺序一致</span><br>        System.out.println(objInput.readInt());<br>        System.out.println(objInput.readBoolean());<br>        System.out.println(objInput.readObject());<br><br>        objInput.close();<br>        objOut.close();<br>    &#125;<br><br><span class="hljs-comment">//这个Dog应该是一个是public类，这样反序列化时候才能找到。反正就是得让反序列化的这个方法，能够找到Dog的位置。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>            <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Dog&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="serialVersionUID"><a href="#serialVersionUID" class="headerlink" title="serialVersionUID"></a>serialVersionUID</h4><p>作用：加一个版本号可以在修改原来的类的时候，让jvm知道这是同一个类，而不是新的类。这样对以前类进行反序列化时候就不会报错了。</p><p><strong>eg:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>            <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>现在Dog类没有序列号，我们在序列化保存后，手动添加一个属性 private int count;这时候进行反序列化就会报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>            <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">报错信息：<br>Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.io.InvalidClassException: com.code.api.Dog; local <span class="hljs-keyword">class</span> <span class="hljs-title class_">incompatible</span>: stream <span class="hljs-type">classdesc</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">808592382565188925</span>, local <span class="hljs-keyword">class</span> <span class="hljs-title class_">serialVersionUID</span> = -<span class="hljs-number">5347002648387494214</span><br></code></pre></td></tr></table></figure><p>然后现在我们在注释掉count属性，在Dog类中加入一个UID(值随意)，然后序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> serialVersionUID=<span class="hljs-number">1L</span>;<br>    <br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>            <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>序列化成功后，我们重新新增count属性，再反序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> serialVersionUID=<span class="hljs-number">1L</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>            <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功：(记得加上toString方法)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">C:\Users\Administrator\.jdks\corretto-<span class="hljs-number">1.8</span><span class="hljs-number">.0_322</span>\bin\...<br><span class="hljs-number">100</span><br><span class="hljs-literal">true</span><br>Dog&#123;name=<span class="hljs-string">&#x27;旺财&#x27;</span>, age=<span class="hljs-number">2</span>&#125;<br><br>Process finished with exit code <span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><p>1.序列化对象时，默认将里面的所以属性都序列化，除了static或transient修饰的成员外！</p><p>2.序列化对象时，要求里面的属性也需要实现序列化接口。（基本数据类型的包装类型已经默认实现了）</p><p>3.序列化具有继承性，也就是说父类实现了序列化，那么它的子类也默认实现</p></blockquote><h3 id="转换（包装）流解决乱码问题"><a href="#转换（包装）流解决乱码问题" class="headerlink" title="转换（包装）流解决乱码问题"></a>转换（包装）流解决乱码问题</h3><p>前面我们读取文件时候，如果是文本文件，我们一般用字符流，因为用字节流读取含有中文的文件时候，会有乱码问题。而且不同的编码会有一定的乱码问题</p><p>转换流就可以把字节流转换成字符流，并且字节流可以指定编码格式</p><p><img src="/blogImg/WrapperStream.png" alt="WrapperStream"></p><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">properties内容：<br><br>name=code<br>pwd=<span class="hljs-number">123456</span><br>adress=localhost<br><span class="hljs-comment">//传统的解析，但是这种方式有很多问题。比如修改配置文件，或者只读取里面的某个kv，显得很繁琐</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    String path=<span class="hljs-string">&quot;src/jdbc.properties&quot;</span>;<br>    BufferedReader reader=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(path));<br>    String line;<br>    <span class="hljs-keyword">while</span> ((line=reader.readLine())!=<span class="hljs-literal">null</span>)&#123;<br>        String[] strings = line.split(<span class="hljs-string">&quot;=&quot;</span>);<br>        System.out.println(strings[<span class="hljs-number">0</span>]+<span class="hljs-string">&quot;:&quot;</span>+strings[<span class="hljs-number">1</span>]);<br>    &#125;<br>    reader.close();<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Peoperties类"><a href="#Peoperties类" class="headerlink" title="Peoperties类"></a>Peoperties类</h4><blockquote><p>Peoperties配置文件中的键值对只能用=连接，=两边不能有空格</p><p>1.加入k有空格怎么办呢？(它会解析成=)</p><p>2，在对properties写入数据时，如果格式有问题，它会自己做出一些修改。（具体code）</p></blockquote><p>常用方法：</p><ol><li>load：加载配置文件的键值对到Peoperties对象</li><li>list：将数据显示到指定设备</li><li>getProPerty(key):根据键获取值</li><li>setProperty(k,v):设置键值对到peoperties对象.不存在即创建，存在即修改</li><li>store：将Peoperties的键值对存储到配置文件，在ieda中，保存信息到配置文件，如果含有中文，会存储Unicode编码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>       String path=<span class="hljs-string">&quot;src/jdbc.properties&quot;</span>;<br>       Properties properties=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>       properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(path));<br>       <span class="hljs-comment">//输出文件</span><br>       properties.list(System.out);<br>       <span class="hljs-comment">//根据键获取值</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;name&quot;</span>);<br>       <span class="hljs-comment">//现在只是创建键值对</span><br>       properties.setProperty(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;Helen&quot;</span>);<br>       properties.setProperty(<span class="hljs-string">&quot;hobbit&quot;</span>,<span class="hljs-string">&quot;ping-pang&quot;</span>);<br>       <span class="hljs-comment">//然后写入！！！</span><br>       properties.store(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(path),<span class="hljs-string">&quot;文件的注释&quot;</span>);<br><br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="properties大致原理"><a href="#properties大致原理" class="headerlink" title="properties大致原理"></a>properties大致原理</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#Sun Nov 13 09:16:59 CST 2022</span><br><span class="hljs-attr">name</span>=<span class="hljs-string">Helen</span><br><span class="hljs-attr">hobbit</span>=<span class="hljs-string">ping-pang</span><br></code></pre></td></tr></table></figure><p>从上面来看，我们可以知道properties可以得到配置文件中的键值对，也能把想要的键值对写入到配置文件。那么这个过程是怎么做到的呢？浅浅的说一下</p><p><img src="/blogImg/properties01.png"></p><p>首先调用一个输入流，把properties的字符读入到一个字符数组里面（容量大小是8192）.前面的一串字符是默认的properties的注释。从name开始就是自己设置的键值对。可以看出在保存字符的时候，如果读取到了换行，它会自己在字符数组中插入换行和空格的转义字符。这样就方便接下来的分割了。</p><p><img src="/blogImg/properties02.png"></p><p><img src="/blogImg/properties03.png"></p><p>然后就开始分析这个字符数组，以每一个换行结束。KeyLen这些表示的是要截取多少个长度的字符。比如上面的4，就是读四个字符(name)，然后转成一个String，这个String就是k.value也是同样的道理，从第几个字符开始，然后长度为多少。现在得到了k=name,v=Helen后，就把这个键值对put(<strong>properties继承了HashTable</strong>)。这样<strong>第一个键值对</strong>就解析完毕了。（它的配置文件的标题并不会放入table）第二个就从上一个结束的地方开始，继续解析。直到全部解析结束</p><p>那么对应的list方法，就是遍历这个table，输出数据。set方法就是直接调用put方法。然后把数据存进hashTable后，才写入到配置文件。这也就解释了为什么properties.setProperty(“hobbit”,”ping-pang”)后。还要properties.store(new FileWriter(path),null);第二步才是用输出流写入数据</p><blockquote><p>IO类比较多，名字也很容易混淆。但是只要记住四个基本，字节流和字符流就行。基本的方法都是大同小异，具体需要时候再去查阅文档也是可以的！</p><p>properties的源码涉及较多的字符操作，如果想要自己debug，建议把kv字符串设置简短一点。比如id=code ,更方便调试</p></blockquote><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>图片来源和内容参考：韩顺平 零基础30天学会Java-哔哩哔哩 <a href="https://b23.tv/iluN6Xg">https://b23.tv/iluN6Xg</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>泛型</tag>
      
      <tag>IO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java常见集合扩容原理</title>
    <link href="/java%E5%B8%B8%E8%A7%81%E9%9B%86%E5%90%88%E6%89%A9%E5%AE%B9%E5%8E%9F%E7%90%86/"/>
    <url>/java%E5%B8%B8%E8%A7%81%E9%9B%86%E5%90%88%E6%89%A9%E5%AE%B9%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>选取了[ArrayList,Vector,HashMap/HashSet]进行简单说明</p></blockquote><p><img src="/blogImg/Collection.png" alt="CollectionDiagrams"></p><h3 id="1-ArrayList"><a href="#1-ArrayList" class="headerlink" title="1.ArrayList:"></a>1.ArrayList:</h3><h4 id="1-1-ArrayList类的基本属性"><a href="#1-1-ArrayList类的基本属性" class="headerlink" title="1.1 ArrayList类的基本属性"></a>1.1 ArrayList类的基本属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&#123;<br>    <span class="hljs-comment">//共享空数组实例用于默认大小的空实例 用于无参构造时候给elementData实例化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;<br>    <span class="hljs-comment">//共享空数组实例用于默认大小的空实例 用于指定初始容量构造时给elementData实例化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;<br>    <br>    <span class="hljs-comment">//数组的默认容量，第一次扩容时会使用到</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">//这个是真正用来存放list数据的数组</span><br>    <span class="hljs-keyword">transient</span> Object[] elementData;<br>    <br>    <span class="hljs-comment">//存放ArrayList的大小</span><br>     <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br>    <span class="hljs-comment">//记录list被修改的次数</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> <span class="hljs-variable">modCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <br>&#125; <br></code></pre></td></tr></table></figure><h4 id="1-2-无参构造下的扩容："><a href="#1-2-无参构造下的扩容：" class="headerlink" title="1.2 无参构造下的扩容："></a>1.2 无参构造下的扩容：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//这里只是给Data赋了一个空值，此时elementData的容量为0</span><br>        <span class="hljs-built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<br>    &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>   <span class="hljs-comment">//这里开始添加元素，该方法是判断数组容量是否足够存放元素。因为每次元素都是+1；如果是第一个元素，此时数组容量为0，而需要的最小容量是1.</span><br>        ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>        elementData[size++] = e;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityInternal</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>     <span class="hljs-comment">//承接上面方法，此时的minCapacity是1，elementData为0.调用calculateCapacity方法</span><br>        ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));<br>    &#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculateCapacity</span><span class="hljs-params">(Object[] elementData, <span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-comment">//因为是调用无参构造，且是第一次添加元素。此时if成立。返回的就是DEFAULT_CAPACITY，也就是10。如果</span><br>    <span class="hljs-comment">//不是调用了无参构造，那么就返回需要的最小容量minCapacity</span><br>        <span class="hljs-keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;<br>            <span class="hljs-keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);<br>        &#125;<br>        <span class="hljs-keyword">return</span> minCapacity;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureExplicitCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>        modCount++;<br><br>        <span class="hljs-comment">// 此时判断需要的最小容量是否大于数组的长度。在无参情况下，length=10.假如数组元素超过了10,才调用grow方法进行扩容</span><br>        <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<br>            grow(minCapacity);<br>    &#125;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> elementData.length;<br>       <span class="hljs-comment">//新的数组容量为原来的+0.5（右移一位表示缩小一半）=1.5</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>            newCapacity = minCapacity;<br>        <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>            newCapacity = hugeCapacity(minCapacity);<br>      <br>       <span class="hljs-comment">//复制原数组。扩容完成</span><br>        elementData = Arrays.copyOf(elementData, newCapacity);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h4 id="1-3-指定初始容量下的扩容"><a href="#1-3-指定初始容量下的扩容" class="headerlink" title="1.3 指定初始容量下的扩容"></a>1.3 指定初始容量下的扩容</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayList</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>    <span class="hljs-keyword">if</span> (initialCapacity &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//这里就直接指定了初始容量大小</span><br>        <span class="hljs-built_in">this</span>.elementData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[initialCapacity];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (initialCapacity == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//假如初始容量为0，发现elementData并不是DEFAULTCAPACITY_EMPTY_ELEMENTDATA。因此即使初始容量为0，第一次扩容</span><br>        <span class="hljs-comment">//也并不会变成初始容量10 了。</span><br>        <span class="hljs-built_in">this</span>.elementData = EMPTY_ELEMENTDATA;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span>+<br>                                           initialCapacity);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculateCapacity</span><span class="hljs-params">(Object[] elementData, <span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-comment">//指定了initialCapacity后，if就不成立。此时就直接返回需要的最小容量。然后判断容量是否足够，不够就调用grow扩容</span><br>        <span class="hljs-keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;<br>            <span class="hljs-keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);<br>        &#125;<br>        <span class="hljs-keyword">return</span> minCapacity;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul><li><p>在无参构造情况下，ArrayList第一次扩容后elementData数组容量为10，此后每次扩容为原来的1.5倍</p></li><li><p>在指定了初始容量情况下（初始容量不为0），初始容量就是指定的大小，以后每次扩容均为原来的1.5倍</p></li><li><p>如果初始容量为0，第一次扩容后数组的大小为1。请看下面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"> ArrayList&lt;Integer&gt; list1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br> ArrayList&lt;Integer&gt; list2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">0</span>);<br><br>list1初始容量为<span class="hljs-number">0</span>，第一次扩容就为<span class="hljs-number">10</span>；<br>list2初始容量也为<span class="hljs-number">0</span>，但是第一次添加数据后容量是<span class="hljs-number">1.</span>请仔细分析 grow（）方法中的<br>    <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>            newCapacity = minCapacity;<br></code></pre></td></tr></table></figure></li></ul><p><img src="/blogImg/ArrayList01.png" alt="ArrayList-debug"></p><hr><h3 id="2-Vector"><a href="#2-Vector" class="headerlink" title="2.Vector"></a>2.Vector</h3><h4 id="2-1-Vevtor类的基本属性"><a href="#2-1-Vevtor类的基本属性" class="headerlink" title="2.1 Vevtor类的基本属性"></a>2.1 Vevtor类的基本属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Vector&#123;<br>    <span class="hljs-comment">//保存数据的数组</span><br>    <span class="hljs-keyword">protected</span> Object[] elementData<br>        <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> elementCount;<br>    <span class="hljs-comment">//这个和扩容有关，下面会用到</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> capacityIncrement;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-扩容原理"><a href="#2-2-扩容原理" class="headerlink" title="2.2 扩容原理"></a>2.2 扩容原理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Vector</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-number">10</span>);<br>    &#125;<br><br><br> <span class="hljs-keyword">public</span> <span class="hljs-title function_">Vector</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>     <span class="hljs-comment">//直接指定了初始容量为10</span><br>        <span class="hljs-built_in">this</span>(initialCapacity, <span class="hljs-number">0</span>);<br>    &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Vector</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">int</span> capacityIncrement)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span>+<br>                                               initialCapacity);<br>        <span class="hljs-built_in">this</span>.elementData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[initialCapacity];<br>      <span class="hljs-comment">//capacityIncrement记住这个，此时值为0</span><br>        <span class="hljs-built_in">this</span>.capacityIncrement = capacityIncrement;<br>    &#125;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>      <span class="hljs-comment">//这个和ArrayList中的一样 我们主要继续查看ensureCapacityHelper()方法</span><br>        modCount++;<br>        ensureCapacityHelper(elementCount + <span class="hljs-number">1</span>);<br>        elementData[elementCount++] = e;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityHelper</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>        <span class="hljs-comment">// 同样的判断容量是否够存放数据</span><br>        <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<br>            grow(minCapacity);<br>    &#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>        <span class="hljs-comment">// overflow-conscious code</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> elementData.length;<br>    <span class="hljs-comment">//此时观察看，当capacityIncrement不大于0时，扩容就为原来的两倍。如果capacityIncrement&gt;0,容量则为原来的+capacityIncrement</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + ((capacityIncrement &gt; <span class="hljs-number">0</span>) ?<br>                                         capacityIncrement : oldCapacity);<br>        <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>            newCapacity = minCapacity;<br>        <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>            newCapacity = hugeCapacity(minCapacity);<br>        elementData = Arrays.copyOf(elementData, newCapacity);<br>    &#125;<br><br><span class="hljs-comment">//下面这个Vector的构造器中就可以显示的指定capacityIncrement的值是否&gt;0!</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Vector</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">int</span> capacityIncrement)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span>+<br>                                               initialCapacity);<br>        <span class="hljs-built_in">this</span>.elementData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[initialCapacity];<br>        <span class="hljs-built_in">this</span>.capacityIncrement = capacityIncrement;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h4><ul><li>直接调用无参构造或者不指定capacityIncrement的值时候，第一次扩容为10，第二次为原来的两倍</li><li>capacityIncrement值&gt;0时，扩容大小为原来的容量+capacityIncrement</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>  &#123;<br>     Vector&lt;Integer&gt; vector1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;&gt;();<br>     <span class="hljs-comment">//主要这里不能设置成1,1.因为1的2倍是2,2+2也是2.这样就无法证明capacityIncrement带来的影响了</span><br>      Vector&lt;Integer&gt; vector2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;&gt;(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>      Vector&lt;Integer&gt; vector3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;&gt;(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>      vector1.add(<span class="hljs-number">1</span>);<br><br>      vector2.add(<span class="hljs-number">1</span>);<br>      vector2.add(<span class="hljs-number">2</span>);<br><br>      vector3.add(<span class="hljs-number">1</span>);<br>      vector3.add(<span class="hljs-number">2</span>);<br><span class="hljs-comment">//根据分析，vector1容量应该为10，vector2为1+2=3，vector3应为1的两倍2</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/blogImg/vector-01.png" alt="vector-01"></p><hr><blockquote><p>既是集合，那么集合的特征就是不重复无序。</p></blockquote><h3 id="3-HashSet-HashMap"><a href="#3-HashSet-HashMap" class="headerlink" title="3.HashSet/HashMap"></a>3.HashSet/HashMap</h3><h4 id="3-1-基本属性"><a href="#3-1-基本属性" class="headerlink" title="3.1 基本属性"></a>3.1 基本属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">HashSet&#123;<br>    <span class="hljs-comment">//final类型的Object，充当map中的值。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">PRESENT</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-comment">//节点数组，记住下面的所有table都是这个成员变量，是用来存放数据的。（因为有很多局部变量）</span><br>    <span class="hljs-keyword">transient</span> Node&lt;K,V&gt;[] table;<br>    <span class="hljs-comment">//默认的容量</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_INITIAL_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>;<br>    <span class="hljs-comment">//加载因子</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">DEFAULT_LOAD_FACTOR</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.75f</span>;<br>    <span class="hljs-comment">//阈值，即table长度达到这个值后就会扩容</span><br>    <span class="hljs-type">int</span> threshold;<br>    <span class="hljs-comment">//链表转红黑树的阈值</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TREEIFY_THRESHOLD</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>    <span class="hljs-comment">//树化的最小条件</span><br>     <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MIN_TREEIFY_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">64</span>;<br>    <br>    <span class="hljs-comment">//静态内部类Node的定义</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>.Entry&lt;K,V&gt; &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> hash;<br>        <span class="hljs-keyword">final</span> K key;<br>        V value;<br>        Node&lt;K,V&gt; next;<br><br>        Node(<span class="hljs-type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;<br>            <span class="hljs-built_in">this</span>.hash = hash;<br>            <span class="hljs-built_in">this</span>.key = key;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br>    <br>    <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-无参构造扩容原理"><a href="#3-2-无参构造扩容原理" class="headerlink" title="3.2 无参构造扩容原理"></a>3.2 无参构造扩容原理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashSet</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//直接就是new一个HashMap，所以HashSet是基于HashMap实现的</span><br>        map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">return</span> map.put(e, PRESENT)==<span class="hljs-literal">null</span>;<br>    &#125;<br><br><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>        <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br><span class="hljs-comment">//先根据key算出hash值，根据hash值，key，v插入数据。v就是PRESENT了</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-type">int</span> h;<br>        <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="putVal-方法"><a href="#putVal-方法" class="headerlink" title="putVal()方法:"></a>putVal()方法:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">               <span class="hljs-type">boolean</span> evict)</span> &#123;<br>    Node&lt;K,V&gt;[] tab;<br>    Node&lt;K,V&gt; p; <br>    <span class="hljs-type">int</span> n, i;<br> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * (tab = table)，(n = tab.length) 这种意思是先给局部变量tab赋值。因为局部变量都是必须要初始化的，如果是:</span><br><span class="hljs-comment"> *  第一个元素的添加，此时第一个if成立。进入resize（）方法</span><br><span class="hljs-comment"> *第二次后，tab已经不等于空了，进入第二个if判断是否有hash冲突</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>        n = (tab = resize()).length;<br>    <br>   <span class="hljs-comment">//tab[i = (n - 1) &amp; hash]根据hash值计算这个key应该存放在哪个索引的node位置，将该node赋给p.如果p==null，</span><br>   <span class="hljs-comment">//说明该位置不存在数据，没有hash冲突。就新建一个node。然后将该node放入tal[i]的位置</span><br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<br>        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>    <br>    <span class="hljs-comment">//如果有hash冲突</span><br>    <span class="hljs-keyword">else</span> &#123;<br>        Node&lt;K,V&gt; e; K k;<br>        <span class="hljs-comment">//比较当前索引位置的hash和key是否与要加入的key完全相等，即是否为同一个对象</span><br>        <span class="hljs-comment">//或者key的值是相等的，就不能添加了。</span><br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;  <br>            ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>            e = p;<br>        <span class="hljs-comment">//如果不是上面为false，就判断p是不是一颗红黑树。putTreeVal为红黑树插入。</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>        <span class="hljs-comment">//不是红黑树，那么就是一个链表。</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                <span class="hljs-comment">//此时e==null</span><br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">//在链表末尾插入newNode，先插入在判断</span><br>                    p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>                    <span class="hljs-comment">//如果发现已经有了8个节点，就开始树化。但是treeifyBin还有一个判断</span><br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * final void treeifyBin(Node&lt;K,V&gt;[] tab, int hash) &#123;</span><br><span class="hljs-comment">        int n, index; Node&lt;K,V&gt; e;</span><br><span class="hljs-comment">        当tab数组的长度小于MIN_TREEIFY_CAPACITY（64）时，会先扩容。并不会树化。</span><br><span class="hljs-comment">        if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="hljs-comment">         resize();</span><br><span class="hljs-comment">     */</span><br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                        treeifyBin(tab, hash);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">//同样的依次比较链表上的每个node是否和要插入的node冲突，有冲突直接break。</span><br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">break</span>;<br>                p = e;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//发现有冲突，就不能添加了</span><br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>                e.value = value;<br>            afterNodeAccess(e);<br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125;<br>    ++modCount;<br>    <span class="hljs-comment">//判断size是否大于了阈值。我们可以发现只要map添加了元素，size都会++</span><br>    <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>        resize();<br>    <span class="hljs-comment">//留给它的子类实现的。是一个空方法。可能是为了方便扩展吧</span><br>    afterNodeInsertion(evict);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="resize-方法"><a href="#resize-方法" class="headerlink" title="resize()方法:"></a>resize()方法:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    *第一次添加oldTab==null，所以oldCap=0，oldThr等于默认值=0.</span><br><span class="hljs-comment">    */</span><br>    Node&lt;K,V&gt;[] oldTab = table;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCap</span> <span class="hljs-operator">=</span> (oldTab == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : oldTab.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldThr</span> <span class="hljs-operator">=</span> threshold;<br>    <span class="hljs-type">int</span> newCap, newThr = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//假如原来的数组容量不为空   记住：：Thr结尾的就表示阈值，Cap结尾的表示容量 new表示新的...,old表示原来的...</span><br>    <span class="hljs-keyword">if</span> (oldCap &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<br>            threshold = Integer.MAX_VALUE;<br>            <span class="hljs-keyword">return</span> oldTab;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="hljs-number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;<br>                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<br>            newThr = oldThr &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// double 新的阈值和Cap都左移一位，变成两倍</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldThr &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// initial capacity was placed in threshold</span><br>        newCap = oldThr;<br>    <br>    <span class="hljs-keyword">else</span> &#123;               <span class="hljs-comment">// zero initial threshold signifies using defaults</span><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">*第一次添加元素，直接到了这里，新的容量newCap就为16（1&lt;&lt;4）. </span><br><span class="hljs-comment">*新的阈值等于DEFAULT_LOAD_FACTOR（0.75）*16=12</span><br><span class="hljs-comment">   */</span><br>        newCap = DEFAULT_INITIAL_CAPACITY;<br>        newThr = (<span class="hljs-type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (newThr == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)newCap * loadFactor;<br>        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="hljs-type">float</span>)MAXIMUM_CAPACITY ?<br>                  (<span class="hljs-type">int</span>)ft : Integer.MAX_VALUE);<br>    &#125;<br>    threshold = newThr;  <span class="hljs-comment">//赋值，阈值等于12</span><br>    <span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>    <span class="hljs-comment">//此时发现new了一个数组容量为newCap=16的数组，然后赋给table</span><br>    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[newCap];<br>    table = newTab;<br>    <br>    <span class="hljs-comment">//这个方法就是将原来的tab内容挂载到新的tab上去</span><br>    <span class="hljs-keyword">if</span> (oldTab != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; oldCap; ++j) &#123;<br>            Node&lt;K,V&gt; e;<br>            <span class="hljs-keyword">if</span> ((e = oldTab[j]) != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//将原来的数组内容置空</span><br>                oldTab[j] = <span class="hljs-literal">null</span>;<br>                <span class="hljs-comment">//该索引位置只有一个元素</span><br>                <span class="hljs-keyword">if</span> (e.next == <span class="hljs-literal">null</span>)<br>                    newTab[e.hash &amp; (newCap - <span class="hljs-number">1</span>)] = e;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> TreeNode)<br>                    ((TreeNode&lt;K,V&gt;)e).split(<span class="hljs-built_in">this</span>, newTab, j, oldCap);<br>                <span class="hljs-comment">//假如该索引位置恰好是个链表</span><br>                <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// preserve order</span><br>                    Node&lt;K,V&gt; loHead = <span class="hljs-literal">null</span>, loTail = <span class="hljs-literal">null</span>;<br>                    Node&lt;K,V&gt; hiHead = <span class="hljs-literal">null</span>, hiTail = <span class="hljs-literal">null</span>;<br>                    Node&lt;K,V&gt; next;<br>                    <span class="hljs-keyword">do</span> &#123;<br>                        next = e.next;<br>                        <span class="hljs-keyword">if</span> ((e.hash &amp; oldCap) == <span class="hljs-number">0</span>) &#123;<br>                            <span class="hljs-keyword">if</span> (loTail == <span class="hljs-literal">null</span>)<br>                                loHead = e;<br>                            <span class="hljs-keyword">else</span><br>                                loTail.next = e;<br>                            loTail = e;<br>                        &#125;<br>                        <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-keyword">if</span> (hiTail == <span class="hljs-literal">null</span>)<br>                                hiHead = e;<br>                            <span class="hljs-keyword">else</span><br>                                hiTail.next = e;<br>                            hiTail = e;<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">while</span> ((e = next) != <span class="hljs-literal">null</span>);<br>                    <span class="hljs-keyword">if</span> (loTail != <span class="hljs-literal">null</span>) &#123;<br>                        loTail.next = <span class="hljs-literal">null</span>;<br>                        newTab[j] = loHead;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (hiTail != <span class="hljs-literal">null</span>) &#123;<br>                        hiTail.next = <span class="hljs-literal">null</span>;<br>                        newTab[j + oldCap] = hiHead;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    *第一次元素添加，扩容后直接返回新的数组</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">return</span> newTab;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-指定initialCapacity的有参构造"><a href="#3-3-指定initialCapacity的有参构造" class="headerlink" title="3.3 指定initialCapacity的有参构造"></a>3.3 指定initialCapacity的有参构造</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>      <span class="hljs-built_in">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);<span class="hljs-comment">//已经默认指定了，就是0.75f</span><br>  &#125;<br>  <br> <span class="hljs-keyword">public</span> <span class="hljs-title function_">HashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">float</span> loadFactor)</span> &#123;<br>      <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal initial capacity: &quot;</span> +<br>                                             initialCapacity);<br>      <span class="hljs-keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)<br>          initialCapacity = MAXIMUM_CAPACITY;<br>      <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal load factor: &quot;</span> +<br>                                             loadFactor);<br>     <span class="hljs-comment">//走到这里我们可以发现，在创建一个HashMap时候，这个table都是空的。这是只是计算出了阈值</span><br>      <span class="hljs-built_in">this</span>.loadFactor = loadFactor;<br>      <span class="hljs-built_in">this</span>.threshold = tableSizeFor(initialCapacity);   <br>  &#125;<br></code></pre></td></tr></table></figure><h5 id="tableSizeFor-方法-1"><a href="#tableSizeFor-方法-1" class="headerlink" title="tableSizeFor()方法[1]"></a>tableSizeFor()方法<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[HashMap之tableSizeFor方法图解 - 希夷小道 - 博客园 (cnblogs.com)](https://www.cnblogs.com/xiyixiaodao/p/14483876.html)">[1]</span></a></sup></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//保证容量必须是2的整数幂，为了保证这一点，专门给出了一个巧妙而高效的方法tableSizeFor。说白了初始容量会是一个</span><br><span class="hljs-comment">//不小于它的最接近的2的整数幂m。</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tableSizeFor</span><span class="hljs-params">(<span class="hljs-type">int</span> cap)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> cap - <span class="hljs-number">1</span>;<br>        n |= n &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        n |= n &gt;&gt;&gt; <span class="hljs-number">2</span>;<br>        n |= n &gt;&gt;&gt; <span class="hljs-number">4</span>;<br>        n |= n &gt;&gt;&gt; <span class="hljs-number">8</span>;<br>        n |= n &gt;&gt;&gt; <span class="hljs-number">16</span>;<br>        <span class="hljs-keyword">return</span> (n &lt; <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="hljs-number">1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;<br>       Node&lt;K,V&gt;[] oldTab = table;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">oldCap</span> <span class="hljs-operator">=</span> (oldTab == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : oldTab.length;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">oldThr</span> <span class="hljs-operator">=</span> threshold;<br>       <span class="hljs-type">int</span> newCap, newThr = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">if</span> (oldCap &gt; <span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<br>               threshold = Integer.MAX_VALUE;<br>               <span class="hljs-keyword">return</span> oldTab;<br>           &#125;<br>           <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="hljs-number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;<br>                    oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<br>               newThr = oldThr &lt;&lt; <span class="hljs-number">1</span>; <br>       &#125;<br>    <span class="hljs-comment">//此时这个条件成立。老的阈值是&gt;0的。所以新的容量就等于原来的阈值  Thr就表示阈值，Cap表示容量</span><br>       <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldThr &gt; <span class="hljs-number">0</span>) <br>           newCap = oldThr;<br>       <span class="hljs-keyword">else</span> &#123;               <br>           newCap = DEFAULT_INITIAL_CAPACITY;<br>           newThr = (<span class="hljs-type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<br>       &#125;<br>       <span class="hljs-keyword">if</span> (newThr == <span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-type">float</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)newCap * loadFactor;<br>           newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="hljs-type">float</span>)MAXIMUM_CAPACITY ?<br>                     (<span class="hljs-type">int</span>)ft : Integer.MAX_VALUE);<br>       &#125;<br>       threshold = newThr;<br>       <span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>       Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[newCap];<br>       table = newTab;<br></code></pre></td></tr></table></figure><blockquote><p>ps:    假如HashSet<String> hashSet=new HashSet&lt;&gt;(0);那么第一次扩容后hashSet容量是多少？   </p></blockquote><h4 id="总结：-2"><a href="#总结：-2" class="headerlink" title="总结："></a>总结：</h4><p><strong>无参构造情况下</strong>：</p><ul><li>加载因子默认为0.75.</li><li>第一次扩容，数组容量为16.以后每次数组容量变为原来的2倍</li><li>阈值是容量*加载因子。即table中的size达到阈值时就会扩容</li><li>在table表中，不管是在链表上还是红黑树上添加元素，都会占用一个table容量。</li><li>树化的条件是table数组长度&gt;64且链表上的元素超过了8</li></ul><p><strong>指定了initialCapacity的有参构造</strong>：</p><ul><li>第一次扩容量为最接近initialCapacity的2的整数幂。</li><li>initialCapacity=0时，第一次扩容后容量为2。因为会调用两次resize()方法！！</li></ul><h6 id="两个小demo-2-："><a href="#两个小demo-2-：" class="headerlink" title="两个小demo[2]："></a>两个小demo<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="韩顺平 零基础30天学会Java-哔哩哔哩 https://b23.tv/OJFIOY2">[2]</span></a></sup>：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>如果想要debug查看map元素添加时候触发链表和树化，那么就要tal上的元素满足hash相同，但是equals方法结果不同。所以我们重写hashCode方法。但是不重写equals方法。<span class="hljs-comment">//该方法来自于韩顺平老师的bilibili课程，java基础！</span><br> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMap</span>&#123;<br>    <span class="hljs-keyword">private</span> String value;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TestMap</span><span class="hljs-params">(String value)</span>&#123;<br>        <span class="hljs-built_in">this</span>.value=value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-number">2.</span>在resize方法中，有一段tab表拷贝的方法。里面涉及到了如何将链表挂载到新的tab表上去。下面这段代码，刚好有个索引处挂载了<br>    一条链条，且该链表只有两个元素。非常适合用于debug。（说来神奇，就是自己debug时候写的代码，竟然出现了个hash冲突，才有了链表）<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>  &#123;<br>       HashSet&lt;String&gt; hashSet=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;=<span class="hljs-number">10</span>; i++) &#123;<br>            hashSet.add(i+<span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<br>        hashSet.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>        hashSet.add(<span class="hljs-string">&quot;goof&quot;</span>);<span class="hljs-comment">//在这debug，就能进入到resize中后面那一串代码</span><br>        hashSet.add(<span class="hljs-string">&quot;qqq&quot;</span>);<br>    &#125;<br><br></code></pre></td></tr></table></figure><hr><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.cnblogs.com/xiyixiaodao/p/14483876.html">HashMap之tableSizeFor方法图解 - 希夷小道 - 博客园 (cnblogs.com)</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>韩顺平 零基础30天学会Java-哔哩哔哩 <a href="https://b23.tv/OJFIOY2">https://b23.tv/OJFIOY2</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>源码</tag>
      
      <tag>HashMap</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
